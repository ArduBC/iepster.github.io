@mixin spacingOutput($type, $name, $value, $size) {
  @if $name == vert or $name == hori {
    $excName: -top, -bottom;
    @if $name == vert {
      $excName: -top, -bottom
    } @else {
      $excName: -left, -right
    }
    #{$type}#{nth($excName, 1)}: $size;
    #{$type}#{nth($excName, 2)}: $size;
  } @else {
    #{$type}#{$value}: $size;
  }
}

$positionList: top, right, bottom, left;

@each $kvp in $spacingList {
  // kvp stands for 'key-value pair'
  $exceptions: vert, hori;
  $name: nth($kvp, 1);
  $value: nth($kvp, 2);
  @each $size in $spacingSizeList {
    .has-pd-#{$name}-#{nth($size, 1)} {
      @include spacingOutput(padding, $name, $value, nth($size, 2));
    }

    .has-mg-#{$name}-#{nth($size, 1)} {
      @include spacingOutput(margin, $name, $value, nth($size, 2));
    }

    .has-neg-mg-#{$name}-#{nth($size, 1)} {
      @include spacingOutput(margin, $name, $value, (-1 * nth($size, 2)));
    }
  }
}


@each $position in $positionList {
  @each $size in $spacingSizeList {
    .#{$position}-#{nth($size, 1)} {
      @include spacingOutput($position, '', '', nth($size, 2));
    }

    .#{$position}-neg-#{nth($size, 1)} {
      @include spacingOutput($position, '', '', (-1 * nth($size, 2)));
    }
  }
}

.transform-to-center{
  @include transform(translate(-50%,-50%));
}
